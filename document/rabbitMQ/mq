RabbitMQ提供了6种模式，分别是HelloWorld(一对一)，Work Queue，Publish/Subscribe，Routing，Topics，RPC Request/reply。
其中Publish/Subscribe，Routing，Topics三种模式可以统一归为Exchange模式，只是创建时交换机的类型不一样，分别是fanout、direct、topic。

三种交换机模式：

	Direct Exchange – 处理路由键。
	需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。
	如果一个队列绑定到该交换机上要求路由键 “dog”，则只有被标记为“dog”的消息才被转发，不会转发dog.puppy，也不会转发dog.guard，只会转发dog。(一对一的匹配才会转发)
	Message 通过路由键  发送到指定 交换机，交换机根据路由键 分发到  绑定该路由键的队列   消费者接收

	注意： 同一个exchange 下的一个路由键可以绑定多个队列, 该路由下的消息可以发送到对应的多个队列

	 Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。
	 很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout交换机转发消息是最快的（也号称广播转发消息，会转发到所有绑定此交换机的队列上）

	 Topic Exchange – 将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号“#”匹配一个或多个词，符号“*”匹配不多不少一个词。
	 因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.*” 只会匹配到“audit.irs”。（匹配才会转发）



	 注意：
	 如果一个队列使用程序初始化绑定到一个路由上，那么如果修改队列使其绑定到其他exchange上，结果是：该队列绑定到两个exchange上；两个exchange上对应的消息队列都可以接收到；



	 测试过程遇到的问题：原因未知
	 仅仅使用配置类 配置为手动确认消息模式：消费者接收到消息，正常处理没有异常，即使不确认，消息会自动确认。如果配置文件中配置了
	     listener:
         simple:
           acknowledge-mode: manual
         direct: #另一种消息侦听容器
           acknowledge-mode: manual
      消费者接收到消息，正常处理没有异常，消息必须手动确认。
springBoot中两种侦听容器：SimpleMessageListenerContainer和DirectMessageListenerContainer
    在版本2.0之前的版本中，只有一种MessageListenerContainer—SimpleMessageListenerContainer; 2.0之后有第二个容器——DirectMessageListenerContainer



消息手动确认模式的几点说明

    监听的方法内部必须使用channel进行消息确认，包括消费成功或消费失败  ----手动确认在异常前，即使有异常也会确认，造成消息丢失，所以确认方法应放在最后

    如果不手动确认，也不抛出异常，消息不会自动重新推送（包括其他消费者），因为对于rabbitmq来说始终没有接收到消息消费是否成功的确认，并且Channel是在消费端有缓存的，没有断开连接

    如果rabbitmq断开，连接后会自动重新推送（不管是网络问题还是宕机）

    如果消费端应用重启，消息会自动重新推送

    如果消费端处理消息的时候宕机，消息会自动推给其他的消费者

    如果监听消息的方法抛出异常，消息会按照listener.retry的配置进行重发，但是重发次数完了之后还抛出异常的话，消息不会重发（也不会重发到其他消费者），只有应用重启后会重新推送。因为retry是消费端内部处理的，
    包括异常也是内部处理，对于rabbitmq是不知道的



在RabbitMQ中，一共有三种消息的“死亡”形式：
消息被拒绝。通过调用basic.reject或者basic.nack并且设置的requeue参数为false。
消息因为设置了TTL而过期。
消息进入了一条已经达到最大长度的队列。



producer——》mq：
rabbitmq 整个消息投递的路径为：
producer->rabbitmq broker cluster->exchange->queue->consumer

message 从 producer 到 rabbitmq broker cluster 则会返回一个 confirmCallback 。
message 从 exchange->queue 投递失败则会返回一个 returnCallback 。我们将利用这两个 callback 控制消息的最终一致性和部分纠错能力。


1、 在本地缓存已发送的 message，通过 confirmCallback 或者被确认的 ack，将被确认的message从本地删除 定时扫描本地的message，如果大于一定时间未被确认，则重发  前提是 消费端进行幂等处理一个消息可以接受多次。
2、使用RepublishMessageRecoverer这个MessageRecoverer会发送发送消息到指定队列
3、给队列绑定死信队列，因为默认的RepublishMessageRecoverer会发送nack并且requeue为false。这样抛出一场是这种方式和上面的结果一样都是转发到了另外一个队列。详见DeadLetterConsumer
4、注册自己实现的MessageRecoverer
5、给MessageListenerContainer设置RecoveryCallback
6、对于方法手动捕获异常，进行处理
7、最安全的做法是是使用事务，但是这样效率就会很低，每秒钟处理的message在几百条左右。对于高性能的 mq 来说是非常不可取的。



配置参数：
	★属性文件：org.springframework.boot.autoconfigure.amqp.RabbitProperties

  ★Config:
  # base
  spring.rabbitmq.host: 服务Host
  spring.rabbitmq.port: 服务端口
  spring.rabbitmq.username: 登陆用户名
  spring.rabbitmq.password: 登陆密码
  spring.rabbitmq.virtual-host: 连接到rabbitMQ的vhost
  spring.rabbitmq.addresses: 指定client连接到的server的地址，多个以逗号分隔(优先取addresses，然后再取host)
  spring.rabbitmq.requested-heartbeat: 指定心跳超时，单位秒，0为不指定；默认60s
  spring.rabbitmq.publisher-confirms: 是否启用【发布确认】
  spring.rabbitmq.publisher-returns: 是否启用【发布返回】
  spring.rabbitmq.connection-timeout: 连接超时，单位毫秒，0表示无穷大，不超时
  spring.rabbitmq.parsed-addresses:


  # ssl
  spring.rabbitmq.ssl.enabled: 是否支持ssl
  spring.rabbitmq.ssl.key-store: 指定持有SSL certificate的key store的路径
  spring.rabbitmq.ssl.key-store-password: 指定访问key store的密码
  spring.rabbitmq.ssl.trust-store: 指定持有SSL certificates的Trust store
  spring.rabbitmq.ssl.trust-store-password: 指定访问trust store的密码
  spring.rabbitmq.ssl.algorithm: ssl使用的算法，例如，TLSv1.1


  # cache
  spring.rabbitmq.cache.channel.size: 缓存中保持的channel数量
  spring.rabbitmq.cache.channel.checkout-timeout: 当缓存数量被设置时，从缓存中获取一个channel的超时时间，单位毫秒；如果为0，则总是创建一个新channel
  spring.rabbitmq.cache.connection.size: 缓存的连接数，只有是CONNECTION模式时生效
  spring.rabbitmq.cache.connection.mode: 连接工厂缓存模式：CHANNEL 和 CONNECTION


  # listener
  spring.rabbitmq.listener.simple.auto-startup: 是否启动时自动启动容器
  spring.rabbitmq.listener.simple.acknowledge-mode: 表示消息确认方式，其有三种配置方式，分别是none、manual和auto；默认auto
  spring.rabbitmq.listener.simple.concurrency: 最小的消费者数量
  spring.rabbitmq.listener.simple.max-concurrency: 最大的消费者数量
  spring.rabbitmq.listener.simple.prefetch: 指定一个请求能处理多少个消息，如果有事务的话，必须大于等于transaction数量.
  spring.rabbitmq.listener.simple.transaction-size: 指定一个事务处理的消息数量，最好是小于等于prefetch的数量.
  spring.rabbitmq.listener.simple.default-requeue-rejected: 决定被拒绝的消息是否重新入队；默认是true（与参数acknowledge-mode有关系）
  spring.rabbitmq.listener.simple.idle-event-interval: 多少长时间发布空闲容器时间，单位毫秒

  spring.rabbitmq.listener.simple.retry.enabled: 监听重试是否可用
  spring.rabbitmq.listener.simple.retry.max-attempts: 最大重试次数
  spring.rabbitmq.listener.simple.retry.initial-interval: 第一次和第二次尝试发布或传递消息之间的间隔
  spring.rabbitmq.listener.simple.retry.multiplier: 应用于上一重试间隔的乘数
  spring.rabbitmq.listener.simple.retry.max-interval: 最大重试时间间隔
  spring.rabbitmq.listener.simple.retry.stateless: 重试是有状态or无状态


  # template
  spring.rabbitmq.template.mandatory: 启用强制信息；默认false
  spring.rabbitmq.template.receive-timeout: receive() 操作的超时时间
  spring.rabbitmq.template.reply-timeout: sendAndReceive() 操作的超时时间
  spring.rabbitmq.template.retry.enabled: 发送重试是否可用
  spring.rabbitmq.template.retry.max-attempts: 最大重试次数
  spring.rabbitmq.template.retry.initial-interval: 第一次和第二次尝试发布或传递消息之间的间隔
  spring.rabbitmq.template.retry.multiplier: 应用于上一重试间隔的乘数
  spring.rabbitmq.template.retry.max-interval: 最大重试时间间隔